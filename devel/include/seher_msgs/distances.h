// Generated by gencpp from file seher_msgs/distances.msg
// DO NOT EDIT!


#ifndef SEHER_MSGS_MESSAGE_DISTANCES_H
#define SEHER_MSGS_MESSAGE_DISTANCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace seher_msgs
{
template <class ContainerAllocator>
struct distances_
{
  typedef distances_<ContainerAllocator> Type;

  distances_()
    : head(0.0)
    , left_shoulder(0.0)
    , right_shoulder(0.0)
    , left_elbow(0.0)
    , right_elbow(0.0)
    , left_hand(0.0)
    , right_hand(0.0)
    , torso(0.0)
    , minimal(0.0)  {
    }
  distances_(const ContainerAllocator& _alloc)
    : head(0.0)
    , left_shoulder(0.0)
    , right_shoulder(0.0)
    , left_elbow(0.0)
    , right_elbow(0.0)
    , left_hand(0.0)
    , right_hand(0.0)
    , torso(0.0)
    , minimal(0.0)  {
  (void)_alloc;
    }



   typedef float _head_type;
  _head_type head;

   typedef float _left_shoulder_type;
  _left_shoulder_type left_shoulder;

   typedef float _right_shoulder_type;
  _right_shoulder_type right_shoulder;

   typedef float _left_elbow_type;
  _left_elbow_type left_elbow;

   typedef float _right_elbow_type;
  _right_elbow_type right_elbow;

   typedef float _left_hand_type;
  _left_hand_type left_hand;

   typedef float _right_hand_type;
  _right_hand_type right_hand;

   typedef float _torso_type;
  _torso_type torso;

   typedef float _minimal_type;
  _minimal_type minimal;





  typedef boost::shared_ptr< ::seher_msgs::distances_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seher_msgs::distances_<ContainerAllocator> const> ConstPtr;

}; // struct distances_

typedef ::seher_msgs::distances_<std::allocator<void> > distances;

typedef boost::shared_ptr< ::seher_msgs::distances > distancesPtr;
typedef boost::shared_ptr< ::seher_msgs::distances const> distancesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::seher_msgs::distances_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::seher_msgs::distances_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::seher_msgs::distances_<ContainerAllocator1> & lhs, const ::seher_msgs::distances_<ContainerAllocator2> & rhs)
{
  return lhs.head == rhs.head &&
    lhs.left_shoulder == rhs.left_shoulder &&
    lhs.right_shoulder == rhs.right_shoulder &&
    lhs.left_elbow == rhs.left_elbow &&
    lhs.right_elbow == rhs.right_elbow &&
    lhs.left_hand == rhs.left_hand &&
    lhs.right_hand == rhs.right_hand &&
    lhs.torso == rhs.torso &&
    lhs.minimal == rhs.minimal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::seher_msgs::distances_<ContainerAllocator1> & lhs, const ::seher_msgs::distances_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace seher_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::seher_msgs::distances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seher_msgs::distances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seher_msgs::distances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seher_msgs::distances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seher_msgs::distances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seher_msgs::distances_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::seher_msgs::distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bddb02bb0596d089d8172f7a50bef87e";
  }

  static const char* value(const ::seher_msgs::distances_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbddb02bb0596d089ULL;
  static const uint64_t static_value2 = 0xd8172f7a50bef87eULL;
};

template<class ContainerAllocator>
struct DataType< ::seher_msgs::distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seher_msgs/distances";
  }

  static const char* value(const ::seher_msgs::distances_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::seher_msgs::distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#distances between TCP and human body parts\n"
"#respectively head, left_shoulder, right_shoulder,left_elbow\n"
"#right_elbow, left_hand, right_hand , torso\n"
"\n"
"float32 head\n"
"float32 left_shoulder\n"
"float32 right_shoulder\n"
"float32 left_elbow\n"
"float32 right_elbow\n"
"float32 left_hand\n"
"float32 right_hand\n"
"float32 torso\n"
"float32 minimal\n"
;
  }

  static const char* value(const ::seher_msgs::distances_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::seher_msgs::distances_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head);
      stream.next(m.left_shoulder);
      stream.next(m.right_shoulder);
      stream.next(m.left_elbow);
      stream.next(m.right_elbow);
      stream.next(m.left_hand);
      stream.next(m.right_hand);
      stream.next(m.torso);
      stream.next(m.minimal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distances_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seher_msgs::distances_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::seher_msgs::distances_<ContainerAllocator>& v)
  {
    s << indent << "head: ";
    Printer<float>::stream(s, indent + "  ", v.head);
    s << indent << "left_shoulder: ";
    Printer<float>::stream(s, indent + "  ", v.left_shoulder);
    s << indent << "right_shoulder: ";
    Printer<float>::stream(s, indent + "  ", v.right_shoulder);
    s << indent << "left_elbow: ";
    Printer<float>::stream(s, indent + "  ", v.left_elbow);
    s << indent << "right_elbow: ";
    Printer<float>::stream(s, indent + "  ", v.right_elbow);
    s << indent << "left_hand: ";
    Printer<float>::stream(s, indent + "  ", v.left_hand);
    s << indent << "right_hand: ";
    Printer<float>::stream(s, indent + "  ", v.right_hand);
    s << indent << "torso: ";
    Printer<float>::stream(s, indent + "  ", v.torso);
    s << indent << "minimal: ";
    Printer<float>::stream(s, indent + "  ", v.minimal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEHER_MSGS_MESSAGE_DISTANCES_H
