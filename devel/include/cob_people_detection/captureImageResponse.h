// Generated by gencpp from file cob_people_detection/captureImageResponse.msg
// DO NOT EDIT!


#ifndef COB_PEOPLE_DETECTION_MESSAGE_CAPTUREIMAGERESPONSE_H
#define COB_PEOPLE_DETECTION_MESSAGE_CAPTUREIMAGERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_people_detection
{
template <class ContainerAllocator>
struct captureImageResponse_
{
  typedef captureImageResponse_<ContainerAllocator> Type;

  captureImageResponse_()
    : number_captured_images(0)  {
    }
  captureImageResponse_(const ContainerAllocator& _alloc)
    : number_captured_images(0)  {
  (void)_alloc;
    }



   typedef int32_t _number_captured_images_type;
  _number_captured_images_type number_captured_images;





  typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct captureImageResponse_

typedef ::cob_people_detection::captureImageResponse_<std::allocator<void> > captureImageResponse;

typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse > captureImageResponsePtr;
typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse const> captureImageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_people_detection::captureImageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_people_detection::captureImageResponse_<ContainerAllocator1> & lhs, const ::cob_people_detection::captureImageResponse_<ContainerAllocator2> & rhs)
{
  return lhs.number_captured_images == rhs.number_captured_images;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_people_detection::captureImageResponse_<ContainerAllocator1> & lhs, const ::cob_people_detection::captureImageResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_people_detection::captureImageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_people_detection::captureImageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_people_detection::captureImageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86d49773917fcd20b952a821d3a9e019";
  }

  static const char* value(const ::cob_people_detection::captureImageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86d49773917fcd20ULL;
  static const uint64_t static_value2 = 0xb952a821d3a9e019ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_people_detection/captureImageResponse";
  }

  static const char* value(const ::cob_people_detection::captureImageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int32 number_captured_images\n"
"\n"
;
  }

  static const char* value(const ::cob_people_detection::captureImageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_captured_images);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct captureImageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_people_detection::captureImageResponse_<ContainerAllocator>& v)
  {
    s << indent << "number_captured_images: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_captured_images);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_PEOPLE_DETECTION_MESSAGE_CAPTUREIMAGERESPONSE_H
